<?php

namespace Drupal\Tests\dmc_floss\Unit\FlossQuery;

use Drupal\Tests\UnitTestCase;

/**
 * Class UnitTestCaseTest.
 *
 * @package Drupal\Tests\dmc_floss\Unit\FlossQuery
 */
class UnitTestCaseTest extends UnitTestCase {

  protected $dmcFlossService;

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // TODO: Change the autogenerated stub.
    parent::setUp();
    $this->dmcFlossService = $this->getMockBuilder('\Drupal\dmc_floss\DmcFlossContent')
      ->disableOriginalConstructor()
      ->getMock();
  }

  /**
   * Checking inventory for a valid test.
   */
  public function testCheckInventory() {
    $this->dmcFlossService->expects($this->any())
      ->method('checkInventory')
      ->will($this->returnValueMap([
        'status' => 'Have',
        'count' => 1,
      ]));
    $this->assertArrayEquals($this->dmcFlossService, ['status' => 'Have', 'count' => 1]);
    /*
    $inventory_status_valid = $this->getMockBuilder('\Drupal\dmc_floss\DmcFlossContent')
    ->setConstructorArgs([
    $this->dmc_floss_service
    ])
    ->getMock();
    $inventory_status_valid->method('checkInventory')
    ->willReturn(['status' => 'Have', 'count' => '1']);
    $first_result = $inventory_status_valid->checkInventory(150);
    $this->assertEquals($first_result['status'], 'Have');
    $this->assertEquals($first_result['count'], 1);
     */
    /*
    $inventory_test = new DmcFlossContent();
    $inventory_test->checkInventory(150);
    $this->assertEquals($inventory_test->field_dmc_inventory_status[0]->value, 'h');
    $this->assertEquals($inventory_test->field_dmc_quantity[0]->value, 1);
     */
  }

  /**
   * Test for when no floss is in the DB.
   */
  public function testNoFlossFound() {
    /*
    $inventory_test = new DmcFlossContent();
    $inventory_test->checkInventory(1);
    $this->assertEquals($inventory_test, NULL);
     */
    $this->dmcFlossService->method('checkInventory')
      ->willReturn(NULL);
    $this->assertEquals($this->dmcFlossService->checkInventory(1), NULL);
  }

}
